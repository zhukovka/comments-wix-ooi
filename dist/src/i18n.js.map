{"version":3,"sources":["i18n.js"],"names":["i18n","locale","i18next","use","type","read","language","namespace","callback","then","translation","catch","error","init","lng","fallbackLng","keySeparator","react","wait"],"mappings":";;;kBAGwBA,I;;AAFxB;;;;;;AAEe,SAASA,IAAT,CAAcC,MAAd,EAAsB;AACnC,SAAOC,kBACJC,GADI,CACA;AACHC,UAAM,SADH;AAEHC,UAAM,cAACC,QAAD,EAAWC,SAAX,EAAsBC,QAAtB,EAAmC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,aAAO;AAAA,+CAA6BF,QAA7B;AAAA,SACJG,IADI,CACC;AAAA,eAAeD,SAAS,IAAT,EAAeE,WAAf,CAAf;AAAA,OADD,EAEJC,KAFI,CAEE;AAAA,eAASH,SAASI,KAAT,CAAT;AAAA,OAFF,CAAP;AAGD;AAZE,GADA,EAeJC,IAfI,CAeC;AACJ;AACAC,SAAKb,MAFD;;AAIJ;AACAc,iBAAa,IALT;;AAOJ;AACAC,kBAAc,KARV;;AAUJ;AACAC,WAAO;AACLC,YAAM;AADD;AAXH,GAfD,CAAP;AA8BD,C,CAlCD","file":"i18n.js","sourcesContent":["/* eslint-plugin-disable */\nimport i18next from 'i18next';\n\nexport default function i18n(locale) {\n  return i18next\n    .use({\n      type: 'backend',\n      read: (language, namespace, callback) => {\n        // We configure how i18next should fetch a translation resource when it\n        // needs it: We use Webpack's dynamic imports to fetch resources without\n        // increasing our bundle size.\n        //\n        // See https://webpack.js.org/guides/code-splitting/#dynamic-imports for\n        // more information.\n        return import(`./locales/messages_${language}.json`)\n          .then(translation => callback(null, translation))\n          .catch(error => callback(error));\n      },\n    })\n    .init({\n      // Initial language\n      lng: locale,\n\n      // Fallback language\n      fallbackLng: 'en',\n\n      // Don't use a key separator (no support for nested translation objects)\n      keySeparator: false,\n\n      // Wait for translation data to be available before rendering a component\n      react: {\n        wait: true,\n      },\n    });\n}\n"]}